package com.leetcode;

import java.util.*;

/**
 * Created by IntelliJ IDEA
 *
 * @Date: 19/4/2020 3:06 PM
 * @Author: lihongbing
 */
public class TTTT {


    //1. 两数之和
    //解法一：暴力法
    //时间复杂度：O(n^2)
    //空间复杂度：O(1)
    public static int[] twoSum(int[] nums, int target) {
//        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            for (int j = i + 1; j < nums.length; j++) {
                if (nums[i] + nums[j] == target) {
//                    count++;
                    return new int[]{i, j};
                }
            }
        }
        return null;
    }

    //一遍扫描+二分查找
    //时间复杂度：O(nlgn)
    //空间复杂度：O(1)
    public static int[] twoSum_1(int[] nums, int target) {
        int j = -1;
        for (int i = 0; i < nums.length; i++) {
            j = Arrays.binarySearch(nums, target - nums[i]);
            if (j > i) return new int[]{i, j};
        }
        return null;
    }

    //方法二：两遍哈希表
    //通过以空间换取速度的方式，我们可以将查找时间从 O(n) 降低到 O(1)。
    // 哈希表正是为此目的而构建的，它支持以近似恒定的时间进行快速查找。
    // 我用“近似”来描述，是因为一旦出现冲突，查找用时可能会退化到 O(n)。
    // 但只要你仔细地挑选哈希函数，在哈希表中进行查找的用时应当被摊销为O(1)。
    //第一次迭代中，我们将每个元素的值和它的索引添加到表中。
    // 然后，在第二次迭代中，我们将检查每个元素所对应的目标元素（target - nums[i]）是否存在于表中。注意，该目标元素不能是 nums[i] 本身！
    //时间复杂度：O(n)，我们把包含有 n 个元素的列表遍历两次。由于哈希表将查找时间缩短到 O(1) ，所以时间复杂度为 O(n)。
    //空间复杂度：O(n)，所需的额外空间取决于哈希表中存储的元素数量，该表中存储了 n 个元素。
    public int[] twoSum2(int[] nums, int target) {
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            map.put(nums[i], i);
        }
        for (int i = 0; i < nums.length; i++) {
            int complement = target - nums[i];
            if (map.containsKey(complement) && map.get(complement) != i) {
                return new int[]{i, map.get(complement)};
            }
        }
        throw new IllegalArgumentException("No two sum solution");
    }

    //方法三：一遍哈希表
    //事实证明，我们可以一次完成。在进行迭代并将元素插入到表中的同时，我们还会回过头来检查表中是否已经存在当前元素所对应的目标元素。
    // 如果它存在，那我们已经找到了对应解，并立即将其返回。
    //时间复杂度：O(n)
    //空间复杂度：O(n)
    public int[] twoSum3(int[] nums, int target) {
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            int complement = target - nums[i];
            if (map.containsKey(complement)) {
                return new int[]{map.get(complement), i};
            }
            map.put(nums[i], i);
        }
        throw new IllegalArgumentException("No two sum solution");
    }


    //15. 三数之和         题目要求不能包括重复的三元组,这个要求很高。
    //给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有满足条件且不重复的三元组。
    //
    //注意：答案中不可以包含重复的三元组。
    //
    //看的别人的题解
    //首先对数组进行排序，排序后固定一个数 nums[i]，再使用左右指针指向 nums[i]后面的两端，数字分别为 nums[L] 和 nums[R]，计算三个数的和 sum 判断是否满足为0，满足则添加进结果集
    //如果 nums[i]大于 0，则三数之和必然无法等于 0，结束循环
    //如果 nums[i] == nums[i-1]，则说明该数字重复，会导致结果重复，所以应该跳过
    //当 sum == 0 时，nums[L] == nums[L+1] 则会导致结果重复，应该跳过，L++
    //当 sum == 0 时，nums[R] == nums[R-1] 则会导致结果重复，应该跳过，R--
    //时间复杂度：O(n^2)，n 为数组长度
    public static List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> ans = new ArrayList();
        int len = nums.length;
        if (nums == null || len < 3) return ans;
        Arrays.sort(nums);  // 排序
        for (int i = 0; i < len; i++) {
            if (nums[i] > 0) break; // 如果当前数字大于0，则三数之和一定大于0，所以结束循环
            if (i > 0 && nums[i] == nums[i - 1]) continue; // 去重
            int L = i + 1;
            int R = len - 1;
            while (L < R) {
                int sum = nums[i] + nums[L] + nums[R];
                if (sum == 0) {
                    ans.add(Arrays.asList(nums[i], nums[L], nums[R]));
                    while (L < R && nums[L] == nums[L + 1]) L++; // 去重
                    while (L < R && nums[R] == nums[R - 1]) R--; // 去重
                    L++;
                    R--;
                } else if (sum < 0) L++;
                else if (sum > 0) R--;
            }
        }
        return ans;
    }

    //18. 四数之和
    //给定一个包含 n 个整数的数组 nums 和一个目标值 target，判断 nums 中是否存在四个元素 a，b，c 和 d ，使得 a + b + c + d 的值与 target 相等？找出所有满足条件且不重复的四元组。
    //
    //注意：答案中不可以包含重复的四元组。
    //思路和三数之和类似，
    //a遍历O(N)里嵌套b遍历O(N)再嵌套c,d双指针O(N)--> O(N^3)。 总比暴力法O(N^4)好些吧。
    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> ans = new ArrayList();
        int len = nums.length;
        if (nums == null || len < 4) return ans;
        Arrays.sort(nums);  // 排序
        int a, b, c, d;
        for (a = 0; a <= len - 4; a++) {
            if (a > 0 && nums[a] == nums[a - 1]) continue; //确保nums[a] 改变了
            for (b = a + 1; b <= len - 3; b++) {
                if (b > a + 1 && nums[b] == nums[b - 1]) continue;//确保nums[b] 改变了
                c = b + 1;
                d = len - 1;
                while (c < d) {
                    if (nums[a] + nums[b] + nums[c] + nums[d] < target) {
                        c++;
                    } else if (nums[a] + nums[b] + nums[c] + nums[d] > target) {
                        d--;
                    } else {
                        ans.add(Arrays.asList(nums[a], nums[b], nums[c], nums[d]));
                        while (c < d && nums[c + 1] == nums[c]) { //确保nums[c] 改变了
                            c++;
                        }
                        while (c < d && nums[d - 1] == nums[d]) {//确保nums[d] 改变了
                            d--;
                        }
                        c++;
                        d--;

                    }

                }

            }
        }
        return ans;
    }

    //454. 四数相加 II
    //给定四个包含整数的数组列表 A , B , C , D ,计算有多少个元组 (i, j, k, l) ，使得 A[i] + B[j] + C[k] + D[l] = 0。
    //
    //为了使问题简单化，所有的 A, B, C, D 具有相同的长度 N，且 0 ≤ N ≤ 500 。所有整数的范围在 -228 到 228 - 1 之间，最终结果不会超过 231 - 1 。
    //
    //例如:
    //输入:
    //A = [ 1, 2]
    //B = [-2,-1]
    //C = [-1, 2]
    //D = [ 0, 2]
    //输出:  2
    //解释:
    //两个元组如下:
    //1. (0, 0, 0, 1) -> A[0] + B[0] + C[0] + D[1] = 1 + (-2) + (-1) + 2 = 0
    //2. (1, 1, 0, 0) -> A[1] + B[1] + C[0] + D[0] = 2 + (-1) + (-1) + 0 = 0
    //方法一，暴力法：循环次数 N*N*N*N， 会超时
    //方法二，
    //思路：
    //一.采用分为两组，HashMap存一组，另一组和HashMap进行比对。
    //二.这样的话情况就可以分为三种：
    //1.HashMap存一个数组，如A。然后计算三个数组之和，如BCD。时间复杂度为：O(n)+O(n^3),得到O(n^3).
    //2.HashMap存三个数组之和，如ABC。然后计算一个数组，如D。时间复杂度为：O(n^3)+O(n),得到O(n^3).
    //3.HashMap存两个数组之和，如AB。然后计算两个数组之和，如CD。时间复杂度为：O(n^2)+O(n^2),得到O(n^2).
    //三.根据第二点我们可以得出要存两个数组算两个数组。
    //四.我们以存AB两数组之和为例。首先求出A和B任意两数之和sumAB，以sumAB为key，sumAB出现的次数为value，存入hashmap中。
    //然后计算C和D中任意两数之和的相反数sumCD，在hashmap中查找是否存在key为sumCD。
    //算法时间复杂度为O(n2)。
    public int fourSumCount(int[] A, int[] B, int[] C, int[] D) {
        Map<Integer, Integer> map = new HashMap<>();
        int res = 0;
        for (int i = 0; i < A.length; i++) {
            for (int j = 0; j < B.length; j++) {
                int sumAB = A[i] + B[j];
                if (map.containsKey(sumAB)) map.put(sumAB, map.get(sumAB) + 1);
                else map.put(sumAB, 1);
            }
        }

        for (int i = 0; i < C.length; i++) {
            for (int j = 0; j < D.length; j++) {
                int sumCD = -(C[i] + D[j]);
                if (map.containsKey(sumCD)) res += map.get(sumCD);
            }
        }
        return res;
    }

    //16. 最接近的三数之和
    //给定一个包括 n 个整数的数组 nums 和 一个目标值 target。
    // 找出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三个数的和。假定每组输入只存在唯一答案。
    //解法一：暴力法
    //时间复杂度：O(n^3)
    public static int threeSumClosest(int[] nums, int target) {
        int sum = nums[0] + nums[1] + nums[2];
        for (int i = 0; i < nums.length; i++) {
            for (int j = i + 1; j < nums.length; j++) {
                for (int k = j + 1; k < nums.length; k++) {
                    if (Math.abs(nums[i] + nums[j] + nums[k] - target) < Math.abs(sum - target)) {
                        sum = nums[i] + nums[j] + nums[k];
                    }
                }
            }
        }
        return sum;
    }


    //解法二：
    //首先进行数组排序，时间复杂度 O(nlogn)
    //在数组 nums 中，进行遍历，每遍历一个值利用其下标i，形成一个固定值 nums[i]
    //再使用前指针指向 start = i + 1 处，后指针指向 end = nums.length - 1 处，也就是结尾处
    //根据 sum = nums[i] + nums[start] + nums[end] 的结果，判断 sum 与目标 target 的距离，如果更近则更新结果 ans
    //同时判断 sum 与 target 的大小关系，因为数组有序，如果 sum > target 则 end--，如果 sum < target 则 start++，如果 sum == target 则说明距离为 0 直接返回结果
    //整个遍历过程，固定值为 n 次，双指针为 n 次，时间复杂度为 O(n^2)
    //总时间复杂度：O(nlogn) + O(n^2) = O(n^2)
    public static int threeSumClosest2(int[] nums, int target) {
        Arrays.sort(nums);
        int ans = nums[0] + nums[1] + nums[2];
        int sum = 0;
        for (int i = 0; i < nums.length; i++) {
            int start = i + 1;
            int end = nums.length - 1;
            while (start < end) {
                sum = nums[i] + nums[start] + nums[end];
                if (Math.abs(sum - target) < Math.abs(ans - target)) {
                    ans = sum;
                }
                if (sum > target) {
                    end--;
                } else if (sum < target) {
                    start++;
                } else {
                    return sum;
                }

            }

        }
        return ans;

    }


    public String defangIPaddr(String address) {
        char[] res = new char[address.length() + 8];
        int j = 0;
        for (int i = 0; i < address.length(); i++) {
            if (address.charAt(i) == '.') {
                res[j++] = '[';
                res[j++] = address.charAt(i);
                res[j++] = ']';
            } else {
                res[j++] = address.charAt(i);
            }
        }
        return new String(res);
    }


//    public static void main(String[] args) throws Exception{


//1534236469反转后肯定会溢出。

//    }


    //204. 计数质数 统计所有小于非负整数 n 的质数的数量。
    //一般思维，判断一个数x是否是质数，遍历2～sqrt(x)，判断能否被x整除，这样判断一个数字x的时间复杂度就是O(x^0.5)，找出所有的复杂度就是O(n^1.5)
    //厄拉多塞筛法O(N * logN)
    public static int countPrimes(int n) {
        boolean[] isPrim = new boolean[n];
        Arrays.fill(isPrim, true); //初始化默认值都为 true
        for (int i = 2; i * i < n; i++) //只需要遍历到从2到sqrt(n)
            if (isPrim[i])
                for (int j = i * i; j < n; j += i) //将2*i改成了i*i更加高效
                    isPrim[j] = false;

        int count = 0;
        for (int i = 2; i < n; i++)
            if (isPrim[i]) count++;

        return count;


    }

    //69. x 的平方根
    //实现 int sqrt(int x) 函数。
    //
    //计算并返回 x 的平方根，其中 x 是非负整数。
    //
    //由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。
    //
    //示例 1:
    //
    //输入: 4
    //输出: 2
    //示例 2:
    //
    //输入: 8
    //输出: 2
    //说明: 8 的平方根是 2.82842...,
    //     由于返回类型是整数，小数部分将被舍去。
    //
    //方法一：袖珍计算器算法
    //「袖珍计算器算法」是一种用指数函数exp 和对数函数 ln 代替平方根函数的方法。我们通过有限的可以使用的数学函数，得到我们想要计算的结果。
    //
    //我们将 sqrt(x)写成幂的形式 x^(1/2)，再使用自然对数 e 进行换底，即可得到
    //sqrt(x)=x^(1/2)=(e ^ (ln x))^(1/2)  =e^(0.5lnx)
    //
    //这样我们就可以得到 sqrt(x)
    //注意： 由于计算机无法存储浮点数的精确值（浮点数的存储方法可以参考 IEEE 754，这里不再赘述），
    // 而指数函数和对数函数的参数和返回值均为浮点数，因此运算过程中会存在误差。例如当 x=2147395600 时，e^(0.5lnx)的计算结果与正确值 4634046340 相差 10^-11，
    // 这样在对结果取整数部分时，会得到 4633946339 这个错误的结果。
    //
    //因此在得到结果的整数部分 ans 后，我们应当找出 ans 与ans+1 中哪一个是真正的答案。
    public int mySqrt(int x) {
        if (x == 0) {
            return 0;
        }
        int ans = (int) Math.exp(0.5 * Math.log(x));
        return (long) (ans + 1) * (ans + 1) <= x ? ans + 1 : ans;
    }

    //方法二：二分查找
    //由于 x 平方根的整数部分 ans 是满足 k^2 ≤x 的最大 k 值，因此我们可以对 k 进行二分查找，从而得到答案。
    //
    //二分查找的下界为 0，上界可以粗略地设定为 x。在二分查找的每一步中，我们只需要比较中间元素 mid 的平方与 x 的大小关系，
    // 并通过比较的结果调整上下界的范围。由于我们所有的运算都是整数运算，不会存在误差，
    // 因此在得到最终的答案ans 后，也就不需要再去尝试ans+1 了。
    //时间复杂度：O(logx)，即为二分查找需要的次数。
    //空间复杂度：O(1)。
    public int mySqrt2(int x) {
        int l = 0, r = x, ans = -1;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }

    //367. 有效的完全平方数
    //给定一个正整数 num，编写一个函数，如果 num 是一个完全平方数，则返回 True，否则返回 False。
    //
    //说明：不要使用任何内置的库函数，如  sqrt。
    //
    //示例 1：
    //
    //输入：16
    //输出：True
    //示例 2：
    //
    //输入：14
    //输出：False
    //
    //方法一：二分查找
    //若 num < 2，返回 true。
    //设置左边界为 2，右边界为 num/2。
    //当 left <= right：
    //令 x = (left + right) / 2 作为一个猜测，计算 guess_squared = x * x 与 num 做比较：
    //如果 guess_squared == num，则 num 是一个完全平方数，返回 true。
    //如果 guess_squared > num ，设置右边界 right = x-1。
    //否则设置左边界为 left = x+1。
    //如果在循环体内没有找到，则说明 num 不是完全平方数，返回 false。
    //时间复杂度：O(logN)。
    //空间复杂度：O(1)。
    public boolean isPerfectSquare(int num) {
        if (num < 2) {
            return true;
        }

        long left = 2, right = num / 2, x, guessSquared;
        while (left <= right) {
            x = left + (right - left) / 2;
            guessSquared = x * x;
            if (guessSquared == num) {
                return true;
            }
            if (guessSquared > num) {
                right = x - 1;
            } else {
                left = x + 1;
            }
        }
        return false;
    }

    //633. 平方数之和
    //给定一个非负整数 c ，你要判断是否存在两个整数 a 和 b，使得 a2 + b2 = c。
    //
    //示例1:
    //输入: 5
    //输出: True
    //解释: 1 * 1 + 2 * 2 = 5
    // 
    //示例2:
    //输入: 3
    //输出: False
    //方法一：二分查找
    //我们可以首先枚举 a，并保证 c - a^2 >= 0，随后我们通过二分查找的方法找出是否存在 b，满足 b^2 = c - a^2。二分查找的范围为 [0, c - a^2]。
    //时间复杂度：O(sqrt(c)log c)，其中枚举 a 的时间复杂度为 O(sqrt(c))，二分查找的时间复杂度为 logc。
    //空间复杂度：O(logc)。代码中使用递归的方式实现二分查找，也可以优化到 O(1)。
    public boolean judgeSquareSum(int c) {
        for (long a = 0; a * a <= c; a++) {
            int b = c - (int) (a * a);
            if (binary_search(0, b, b))
                return true;
        }
        return false;
    }

    public boolean binary_search(long s, long e, int n) {
        if (s > e)
            return false;
        long mid = s + (e - s) / 2;
        if (mid * mid == n)
            return true;
        if (mid * mid > n)
            return binary_search(s, mid - 1, n);
        return binary_search(mid + 1, e, n);
    }

    //方法二：使用 sqrt 函数
    //在枚举 a 之后，我们也可以直接使用 sqrt 函数直接找出 b。
    //时间复杂度：O(sqrt(c))
    //空间复杂度：O(1)。
    public boolean judgeSquareSum2(int c) {
        for (long a = 0; a * a <= c; a++) {
            double b = Math.sqrt(c - a * a);
            if (b == (int) b)
                return true;
        }
        return false;
    }


    //14. 最长公共前缀
    //编写一个函数来查找字符串数组中的最长公共前缀。
    //
    //如果不存在公共前缀，返回空字符串 ""。
    //
    //示例 1:
    //
    //输入: ["flower","flow","flight"]
    //输出: "fl"
    public static String longestCommonPrefix(String[] strs) {
        if (strs.length == 0) return "";
        String temp = strs[0];
        String result = temp;
        for (int i = 1; i < strs.length; i++) {
            result = "";
            for (int j = 0; j < Math.min(temp.length(), strs[i].length()); j++) {
                if (temp.charAt(j) == strs[i].charAt(j)) result += temp.charAt(j);
                else break;
            }
            if (result.isEmpty()) break;
            temp = result;

        }

        return result;

    }





    public static int strStr(String haystack, String needle) {
        if (haystack.isEmpty() && needle.isEmpty()) return 0;
        if (needle.isEmpty()) return 0;

        int j = 0;
        for (int i = 0; i < haystack.length() - needle.length() + 1; i++) {

            for (j = 0; j < needle.length(); j++) {
                if (haystack.charAt(i + j) != needle.charAt(j)) {
                    break;
                }
            }
            if (j == needle.length()) return i;

        }

        return -1;
    }


    public static void main(String[] args) {
//        System.out.println(convert("A", 1));
//        System.out.println(romanToInt("MCMXCIV"));
//        String[] param = {"flower", "flow", "flight"};
//        System.out.println(longestCommonPrefix(param));
//        System.out.println(isValid("([)"));
//        System.out.println(strStr("aa", "aa"));
//        findAnagrams("cbaebabacd", "abc");

//        int k = 3;
//        int[] arr = {4, 5, 8, 2};
//        KthLargest kthLargest = new KthLargest(3, arr);
//        kthLargest.add(3);// returns 4
//        kthLargest.add(5);// returns 5
//        kthLargest.add(10);// returns 5
//        kthLargest.add(9);// returns 8
//        kthLargest.add(4);// returns 8
//        reverseBetween(Utils.stringToListNode("[1,2,3,4,5]"), 2, 4);
//        validPalindrome("abc");
//        isPalindrome("A man, a plan, a canal: Panama");
//        System.out.println(Math.abs(Integer.MAX_VALUE - 0));
//        int[] param = {3, 7, 0, 2, 7, 0, 0, 7, 9, 8, 2, 6, 4, 3, 6, 9, 0, 9, 6, 7, 5, 9, 5, 2, 6, 5, 5, 8, 9, 2, 0, 1, 8, 7, 0, 3, 8, 5, 6, 0, 7, 2, 6, 9, 6, 5, 4, 4, 2, 8, 5, 7, 9, 0, 1, 8, 6, 1, 2, 7, 8, 1, 0, 3, 4, 8, 0, 0, 5, 5, 9, 6, 3, 4, 5, 6, 2, 9, 7, 7, 1, 1, 3, 8, 0, 6, 2, 5, 3, 3, 7, 2, 8, 9, 0, 1, 9, 5, 1, 1, 9, 7, 3, 2, 2, 1, 2, 1, 7, 4, 8, 9, 2, 7, 2, 4, 7, 8, 3, 4, 9, 8, 9, 1, 4, 8, 3, 6, 6, 7, 8, 0, 3, 5, 2, 3, 2, 2, 0, 5, 5, 7, 6, 3, 6, 8, 3, 2, 5, 0, 8, 2, 7, 4, 4, 3, 8, 2, 2, 4, 9, 3, 4, 2, 2, 9, 2, 4, 6, 1, 6, 2, 5, 0, 7, 4, 7, 4, 6, 3, 2, 7, 1, 9, 7, 0, 5, 2, 2, 0, 7, 7, 4, 0, 1, 3, 5, 2, 8, 7, 1, 5, 2, 1, 9, 4, 2, 8, 0, 4, 2, 2, 0, 2, 0, 1, 4, 0, 8, 1, 2, 5, 1, 2, 3, 4, 5, 5, 6, 1, 6, 4, 3, 2, 8, 6, 0, 1, 5, 7, 0, 0, 3, 2, 0, 8, 9, 4, 4, 8, 2, 3, 4, 9, 0, 3, 9, 3, 4, 3, 2, 0, 8, 2, 3, 6, 5, 7, 1, 2, 9, 4, 6, 9, 4, 5, 1, 2, 7, 2, 8, 4, 6, 2, 6, 8, 0, 2, 8, 4, 9, 6, 7, 4, 6, 3, 7, 6, 5, 1, 0, 2, 0, 1, 8, 5, 6, 9, 5, 9, 8, 9, 0, 1, 6, 5, 4, 4, 2, 5, 4, 6, 6, 0, 2, 3, 5, 5, 4, 2, 5, 6, 7, 3, 3, 7, 8, 3, 4, 1, 9, 6, 1, 2, 2, 5, 2, 6, 7, 9, 3, 5, 0, 4, 0, 9, 7, 7, 7, 4, 5, 0, 5, 9, 6, 2, 1, 0, 0, 1, 8, 7, 3, 0, 7, 5, 6, 5, 0, 9, 8, 9, 2, 1, 9, 3, 6, 9, 2, 8, 7, 7, 7, 3, 6, 3, 5, 4, 1, 4, 5, 0, 2, 1, 2, 8, 8, 1, 8, 5, 0, 2, 7, 6, 6, 4, 0, 9, 8, 1, 5, 4, 5, 5, 4, 3, 0, 9, 3, 9, 3, 4, 6, 4, 4, 0, 8, 8, 1, 8, 6, 5, 0, 1, 2, 8, 3, 6, 5, 6, 6, 3, 0, 1, 3, 1, 3, 2, 8, 5, 1, 4, 1, 7, 6, 2, 6, 9, 1, 3, 0, 1, 7, 5, 1, 4, 9, 7, 8, 6, 4, 5, 4, 1, 3, 4, 6, 7, 9, 8, 8, 3, 1, 8, 2, 8, 8, 8, 5, 8, 9, 4, 9, 5, 0, 5, 5, 4, 8, 2, 5, 9, 1, 6, 0, 2, 3, 0, 7, 2, 7, 9, 8, 2, 5, 3, 9, 8, 4, 6, 7, 0, 3, 5, 5, 9, 8, 9, 3, 7, 4, 4, 1, 2, 4, 0, 1, 5, 9, 6, 7, 7, 9, 8, 9, 1, 3, 9, 6, 7, 6, 7, 0, 6, 3, 5, 2, 5, 0, 6, 8, 1, 0, 1, 1, 4, 5, 0, 4, 7, 7, 0, 0, 8, 9, 5, 2, 4, 5, 0, 1, 5, 4, 2, 3, 1, 1, 8, 4, 8, 1, 9, 9, 7, 4, 3, 4, 1, 1, 1, 6, 0, 8, 6, 1, 5, 0, 7, 4, 7, 3, 4, 0, 6, 4, 3, 9, 4, 6, 4, 6, 8, 8, 2, 2, 7, 5, 3, 3, 3, 0, 1, 3, 7, 8, 4, 9, 0, 5, 3, 0, 8, 2, 2, 0, 8, 2, 2, 2, 2, 0, 1, 6, 6, 4, 9, 8, 0, 1, 7, 7, 5, 4, 4, 3, 1, 2, 3, 0, 3, 9, 2, 5, 4, 5, 9, 1, 6, 3, 3, 9, 0, 8, 4, 4, 4, 6, 6, 4, 7, 7, 0, 9, 5, 6, 4, 0, 2, 1, 8, 1, 9, 8, 6, 2, 4, 8, 0, 9, 2, 2, 4, 1, 4, 4, 8, 3, 8, 0, 2, 8, 4, 9, 2, 9, 7, 1, 3, 8, 6, 8, 0, 7, 9, 2, 6, 5, 5, 2, 6, 5, 5, 2, 4, 2, 9, 4, 1, 4, 6, 1, 7, 8, 3, 8, 5, 3, 9, 1, 2, 0, 3, 1, 2, 1, 7, 5, 4, 9, 1, 2, 6, 3, 4, 3, 6, 5, 7, 8, 8, 8, 9, 6, 5, 1, 7, 6, 0, 3, 9, 8, 2, 4, 6, 8, 0, 2, 7, 8, 4, 2, 8, 0, 6, 5, 4, 3, 0, 6, 3, 8, 8, 7, 5, 5, 0, 4, 3, 0, 2, 7, 5, 4, 8, 0, 6, 7, 9, 7, 7, 9, 0, 7, 2, 7, 2, 2, 5, 2, 0, 6, 5, 6, 2, 6, 2, 2, 1, 3, 2, 7, 7, 8, 2, 9, 3, 7, 3, 1, 8, 9, 6, 6, 9, 3, 0, 7, 5, 0, 7, 3, 1, 3, 6, 9, 7, 3, 2, 7, 0, 5, 2, 7, 4, 1, 1, 5, 0, 1, 4, 4, 7, 7, 2, 9, 8, 3, 1, 8, 5, 4, 5, 9, 3, 7, 7, 6, 7, 0, 0, 7, 3, 0, 7, 4, 8, 5, 0, 2, 1, 9, 3, 6, 3, 5, 3, 8, 7, 2, 2, 5, 3, 1, 3, 9, 8, 6, 2, 8, 7, 5, 7, 7, 1, 9, 3, 3, 5, 5, 6, 9, 5, 2, 7, 8, 3, 5, 0, 4, 7, 8, 4, 9, 7, 1, 1, 9, 5, 9, 4, 1, 1, 5, 8, 2, 2, 9, 0, 7, 8, 3, 1, 5, 1, 4, 7, 1, 8, 6, 3, 5, 2, 6, 2, 6, 4, 3, 1, 6, 9, 4, 9, 3, 9, 9, 8, 2, 8, 0, 8, 3, 2, 4, 0, 5, 9, 2, 4, 3, 7, 9, 0, 0, 5, 5, 7, 7, 6, 3, 9, 3, 8, 5, 4, 9, 1, 7, 1, 7, 1, 5, 7, 1, 4, 3, 4, 7, 3, 4, 2, 3, 7, 2, 0, 2, 4, 8, 7, 7, 1, 1, 8, 3, 0, 1, 4, 5, 3, 4, 1, 3, 2, 5, 3, 8, 1, 6, 0, 9, 7, 6, 3, 0, 3, 9, 3, 0, 2, 4, 0, 9, 0, 8, 7, 8, 7, 6, 9, 4, 0, 0, 4, 5, 4, 7, 8, 6, 6, 8, 0, 1, 9, 4, 9, 1, 0, 4, 8, 6, 1, 6, 6, 9, 6, 8, 4, 7, 6, 8, 8, 1, 0, 0, 9, 0, 8, 0, 5, 2, 3, 7, 7, 5, 7, 6, 3, 8, 2, 2, 3, 9, 1, 2, 9, 3, 1, 0, 5, 5, 2, 1, 5, 9, 4, 4, 0, 7, 9, 7, 3, 3, 4, 4, 3, 7, 7, 4, 6, 6, 3, 9, 6, 4, 6, 9, 8, 5, 0, 0, 2, 2, 4, 5, 6, 2, 9, 9, 1, 7, 0, 7, 6, 7, 0, 4, 9, 5, 8, 7, 3, 8, 6, 2, 5, 5, 0, 7, 8, 6, 8, 6, 3, 5, 9, 7, 9, 7, 5, 1, 0, 3, 8, 9, 0, 4, 7, 1, 0, 3, 2, 0, 3, 3, 2, 2, 6, 6, 7, 2, 1, 3, 5, 7, 9, 5, 9, 9, 0, 3, 5, 4, 4, 9, 2, 8, 3, 8, 3, 7, 6, 1, 3, 9, 7, 2, 4, 8, 0, 6, 0, 7, 7, 3, 5, 5, 0, 7, 4, 3, 4, 7, 8, 3, 0, 7, 7, 0, 0, 8, 9, 2, 7, 3, 8, 8, 2, 4, 3, 3, 3, 8, 1, 5, 2, 8, 0, 2, 0, 2, 6, 5, 2, 3, 6, 5, 8, 1, 3, 6, 9, 0, 4, 6, 1, 0, 6, 3, 8, 0, 2, 0, 2, 4, 9, 9, 7, 9, 3, 4, 7, 3, 4, 5, 2, 7, 1, 8, 8, 0, 2, 5, 0, 7, 7, 2, 1, 3, 7, 1, 2, 1, 1, 2, 5, 7, 1, 7, 1, 6, 3, 7, 9, 1, 4, 6, 4, 7, 5, 8, 0, 4, 8, 8, 5, 8, 6, 5, 1, 7, 7, 2, 4, 8, 3, 6, 1, 9, 3, 1, 5, 6, 6, 0, 7, 6, 1, 3, 6, 7, 9, 9, 9, 7, 2, 4, 2, 5, 3, 2, 2, 6, 3, 8, 4, 8, 9, 8, 5, 6, 3, 2, 9, 0, 2, 4, 0, 8, 4, 1, 9, 0, 6, 9, 5, 0, 3, 1, 0, 3, 2, 8, 2, 8, 9, 1, 6, 0, 3, 0, 2, 5, 0, 2, 4, 4, 2, 5, 5, 8, 6, 1, 1, 7, 8, 2, 9, 6, 5, 0, 2, 2, 2, 4, 0, 7, 5, 6, 0, 1, 8, 9, 3, 7, 5, 7, 8, 4, 8, 9, 5, 4, 8, 8, 5, 8, 1, 5, 8, 1, 7, 7, 6, 9, 6, 0, 0, 7, 1, 8, 1, 6, 9, 7, 0, 9, 1, 6, 8, 0, 4, 4, 4, 0, 5, 4, 2, 3, 7, 2, 8, 8, 1, 0, 8, 4, 7, 1, 5, 5, 6, 4, 2, 7, 3, 3, 5, 6, 0, 6, 0, 3, 6, 6, 5, 1, 8, 4, 2, 7, 1, 5, 3, 4, 7, 4, 2, 1, 2, 8, 7, 3, 4, 0, 1, 2, 2, 6, 0, 5, 5, 8, 6, 0, 8, 9, 6, 8, 6, 2, 8, 0, 7, 6, 0, 9, 4, 9, 7, 2, 9, 3, 0, 8, 9, 6, 9, 1, 1, 2, 2, 7, 4, 4, 8, 8, 7, 5, 1, 3, 5, 8, 0, 9, 9, 6, 6, 7, 3, 9, 3, 2, 4, 8, 4, 1, 6, 8, 5, 6, 3, 2, 5, 7, 6, 3, 6, 9, 8, 6, 1, 8, 6, 0, 1, 9, 4, 4, 0, 8, 1, 9, 0, 9, 6, 5, 9, 1, 6, 4, 4, 0, 1, 1, 0, 0, 3, 2, 4, 5, 4, 4, 5, 1, 7, 6, 4, 6, 8, 0, 8, 1, 8, 8, 0, 5, 6, 3, 9, 9, 4, 0, 4, 2, 8, 3, 7, 5, 0, 4, 4, 0, 4, 7, 9, 2, 2, 2, 6, 5, 0, 6, 8, 6, 1, 1, 7, 2, 5, 6, 1, 0, 6, 4, 4, 8, 4, 4, 1, 9, 2, 2, 3, 1, 5, 6, 9, 0, 9, 0, 6, 1, 5, 5, 2, 5, 7, 0, 9, 5, 7, 4, 4, 1, 4, 9, 5, 6, 3, 5, 7, 5, 1, 8, 4, 8, 3, 2, 3, 3, 0, 4, 1, 1, 2, 7, 1, 6, 2, 7, 7, 1, 7, 3, 4, 0, 3, 3, 4, 1, 5, 8, 5, 0, 5, 7, 5, 0, 9, 2, 3, 6, 4, 7, 5, 6, 1, 2, 3, 9, 3, 7, 4, 8, 4, 1, 4, 3, 6, 4, 0, 5, 5, 4, 3, 3, 8, 8, 7, 4, 0, 1, 3, 7, 4, 2, 7, 8, 1, 3, 0, 5, 2, 5, 8, 7, 5, 9, 8, 0, 5, 2, 9, 9, 2, 9, 2, 5, 9, 0, 2, 4, 1, 7, 8, 9, 4, 1, 6, 4, 9, 7, 4, 3, 3, 4, 6, 2, 7, 5, 9, 7, 6, 3, 3, 7, 7, 2, 1, 8, 5, 0, 6, 7, 0, 4, 7, 5, 2, 1, 1, 0, 2, 6, 3, 4, 0, 7, 8, 8, 6, 2, 3, 7, 3, 9, 7, 3, 2, 8, 0, 4, 2, 6, 6, 2, 7, 8, 0, 1, 6, 3, 0, 2, 4, 7, 3, 5, 5, 3, 9, 5, 7, 4, 6, 9, 4, 3, 4, 6, 4, 6, 5, 5, 0, 2, 9, 3, 2, 6, 3, 9, 2, 0, 4, 1, 3, 5, 3, 7, 4, 9, 8, 6, 6, 5, 0, 8, 9, 9, 9, 7, 4, 6, 3, 2, 6, 9, 8, 9, 2, 1, 3, 9, 1, 1, 4, 7, 2, 5, 2, 4, 2, 0, 1, 4, 9, 6, 1, 1, 6, 7, 0, 2, 7, 3, 8, 0, 3, 0, 6, 5, 9, 1, 3, 6, 2, 5, 9, 9, 8, 3, 3, 1, 5, 8, 3, 8, 0, 4, 9, 5, 5, 6, 4, 2, 7, 0, 9, 9, 6, 1, 1, 0, 5, 9, 4, 9, 4, 4, 2, 3, 5, 1, 8, 9, 6, 8, 8, 2, 6, 9, 4, 0, 8, 9, 9, 4, 7, 2, 3, 8, 7, 7, 8, 0, 1, 9, 8, 2, 0, 3, 0, 3, 8, 7, 7, 6, 6, 2, 8, 5, 6, 7, 9, 7, 8, 2, 8, 7, 3, 5, 1, 0, 7, 1, 0, 3, 5, 2, 4, 5, 1, 2, 6, 6, 4, 5, 5, 0, 6, 6, 0, 9, 9, 4, 1, 8, 8, 6, 5, 2, 6, 8, 3, 8, 9, 8, 1, 3, 7, 0, 3, 7, 4, 6, 7, 4, 1, 5, 3, 6, 1, 4, 9, 8, 9, 8, 1, 0, 2, 3, 0, 1, 1, 9, 0, 9, 2, 3, 0, 7, 7, 0, 8, 8, 5, 7, 7, 5, 4, 2, 4, 2, 2, 3, 3, 3, 9, 0, 2, 4, 6, 3, 6, 9, 4, 0, 2, 3, 2, 0, 1, 6, 0, 1, 0, 3, 5, 1, 0, 2, 3, 5, 5, 7, 9, 3, 9, 9, 5, 9, 7, 7, 4, 2, 1, 3, 8, 1, 4, 6, 2, 0, 7, 8, 7, 8, 0, 1, 5, 8, 3, 9, 6, 1, 8, 2, 7, 9, 7, 3, 8, 5, 6, 2, 1, 5, 8, 7, 9, 3, 2, 6, 0, 2, 8, 5, 8, 4, 7, 4, 7, 2, 4, 1, 6, 7, 4, 5, 8, 6, 2, 0, 4, 7, 9, 8, 9, 5, 6, 5, 4, 7, 9, 8, 8, 2, 5, 6, 5, 1, 7, 5, 6, 4, 3, 5, 7, 8, 3, 7, 9, 8, 1, 8, 7, 1, 1, 3, 2, 4, 4, 0, 0, 0, 9, 8, 0, 1, 0, 3, 1, 5, 4, 5, 2, 5, 6, 7, 6, 5, 4, 1, 8, 6, 8, 6, 0, 7, 8, 5, 5, 1, 3, 1, 4, 5, 0, 9, 0, 7, 3, 1, 7, 9, 3, 8, 2, 3, 3, 7, 6, 1, 4, 4, 2, 1, 3, 1, 7, 1, 0, 4, 3, 8, 0, 4, 5, 3, 3, 4, 6, 0, 0, 8, 7, 3, 1, 8, 9, 2, 6, 4, 0, 9, 8, 7, 0, 1, 2, 7, 8, 3, 9, 1, 0, 9, 5, 5, 0, 4, 7, 0, 8, 6, 0, 2, 3, 3, 8, 5, 2, 7, 5, 6, 5, 1, 2, 2, 3, 0, 1, 6, 7, 5, 0, 0, 8, 5, 1, 0, 7, 4, 0, 4, 8, 7, 8, 2, 4, 7, 0, 8, 8, 0, 2, 0, 6, 2, 4, 4, 9, 7, 5, 4, 2, 4, 1, 0, 3, 2, 1, 5, 7, 8, 7, 5, 4, 2, 6, 1, 8, 7, 9, 0, 1, 0, 1, 8, 7, 6, 7, 2, 1, 5, 6, 0, 3, 3, 0, 7, 0, 6, 3, 3, 5, 0, 3, 2, 4, 1, 7, 8, 5, 2, 0, 8, 5, 4, 7, 4, 5, 8, 0, 7, 6, 3, 6, 1, 3, 9, 1, 0, 3, 0, 7, 6, 0, 9, 2, 1, 8, 7, 2, 3, 2, 6, 3, 9, 7, 9, 2, 2, 9, 4, 0, 2, 3, 4, 1, 4, 3, 4, 3, 7, 6, 4, 4, 7, 6, 1, 1, 2, 7, 6, 0, 9, 9, 0, 0, 6, 8, 7, 3, 6, 1, 6, 3, 3, 2, 8, 2, 3, 4, 3, 1, 5, 4, 7, 5, 5, 1, 9, 3, 6, 9, 6, 6, 6, 2, 4, 4, 2, 2, 3, 9, 6, 7, 2, 1, 7, 6, 5, 7, 5, 6, 9, 3, 6, 6, 7, 4, 5, 5, 2, 9, 2, 4, 4, 2, 7, 5, 9, 7, 5, 7, 8, 6, 6, 0, 0, 2, 3, 9, 9, 0, 8, 5, 2, 9, 5, 2, 7, 9, 3, 9, 5, 0, 9, 8, 8, 7, 5, 5, 2, 3, 7, 0, 1, 6, 7, 4, 5, 1, 9, 5, 2, 1, 8, 4, 4, 1, 7, 8, 8, 1, 6, 9, 1, 8, 6, 0, 9, 8, 2, 2, 4, 3, 9, 6, 0, 3, 7, 6, 6, 9, 4, 7, 3, 3, 2, 4, 1, 7, 4, 7, 0, 4, 6, 9, 6, 8, 6, 9, 0, 3, 7, 6, 5, 3, 0, 4, 5, 4, 6, 0, 7, 0, 6, 5, 7, 9, 9, 1, 1, 3, 9, 6, 5, 6, 3, 2, 2, 1, 1, 6, 8, 5, 9, 5, 5, 6, 1, 7, 8, 9, 7, 7, 8, 8, 9, 9, 9, 5, 7, 0, 1, 2, 0, 7, 1, 9, 7, 3, 2, 8, 9, 2, 0, 7, 1, 5, 2, 4, 5, 1, 8, 0, 5, 6, 3, 6, 8, 5, 3, 4, 4, 3, 5, 8, 5, 6, 3, 7, 4, 1, 2, 8, 0, 6, 5, 1, 2, 6, 9, 6, 6, 2, 2, 6, 2, 4, 3, 9, 0, 2, 2, 8, 5, 0, 0, 8, 7, 8, 2, 7, 5, 7, 1, 1, 3, 9, 7, 5, 5, 5, 9, 0, 6, 9, 0, 5, 5, 0, 7, 6, 1, 2, 2, 8, 0, 5, 5, 9, 7, 5, 5, 3, 3, 3, 8, 5, 2, 7, 8, 9, 6, 1, 6, 4, 7, 9, 0, 0, 2, 2, 8, 2, 9, 3, 2, 1, 8, 4, 3, 4, 5, 9, 6, 9, 0, 4, 3, 7, 5, 4, 8, 4, 8, 3, 8, 3, 6, 7, 8, 6, 9, 3, 8, 6, 2, 1, 8, 8, 6, 9, 3, 2, 6, 2, 5, 2, 2, 1, 5, 8, 4, 1, 6, 9, 8, 3, 4, 5, 9, 3, 6, 5, 7, 7, 4, 7, 2, 3, 3, 5, 7, 7, 5, 7, 4, 6, 6, 0, 0, 1, 8, 6, 4, 8, 4, 8, 3, 2, 9, 2, 7, 3, 9, 0, 5, 2, 6, 5, 9, 9, 4, 3, 7, 7, 6, 3, 0, 7, 3, 4, 7, 2, 9, 2, 7, 1, 5, 1, 9, 0, 3, 5, 7, 0, 5, 6, 4, 6, 7, 0, 5, 4, 1, 9, 5, 4, 9, 0, 0, 4, 0, 2, 1, 8, 5, 2, 9, 8, 4, 7, 2, 0, 7, 3, 4, 7, 1, 2, 8, 1, 2, 8, 6, 9, 6, 0, 8, 0, 6, 5, 8, 2, 0, 6, 3, 9, 5, 9, 0, 9, 7, 9, 4, 3, 3, 1, 3, 7, 9, 8, 5, 5, 9, 1, 0, 4, 9, 5, 6, 6, 5, 2, 3, 4, 2, 1, 3, 2, 0, 9, 1, 4, 1, 6, 6, 8, 2, 4, 8, 7, 0, 2, 6, 9, 4, 2, 2, 5, 0, 3, 8, 4, 4, 2, 8, 9, 8, 8, 3, 3, 0, 7, 0, 1, 6, 6, 6, 9, 5, 4, 0, 9, 3, 5, 7, 8, 1, 9, 0, 2, 4, 4, 1, 0, 5, 8, 5, 6, 1, 1, 6, 9, 4, 4, 8, 1, 5, 2, 3, 0, 8, 5, 1, 2, 0, 5, 3, 9, 9, 4, 4, 4, 0, 8, 6, 6, 0, 3, 3, 1, 7, 8, 9, 1, 4, 4, 5, 8, 2, 8, 7, 6, 8, 5, 1, 0, 7, 5, 5, 3, 5, 9, 9, 2, 8, 5, 8, 7, 6, 7, 6, 6, 4, 8, 8, 8, 8, 0, 4, 8, 3, 0, 6, 1, 5, 9, 9, 6, 6, 1, 0, 7, 4, 1, 6, 1, 7, 4, 3, 4, 8, 4, 5, 3, 6, 9, 3, 2, 4, 4, 5, 9, 8, 2, 1, 2, 4, 6, 3, 9, 8, 6, 6, 3, 6, 7, 9, 6, 2, 6, 7, 9, 9, 3, 3, 1, 8, 5, 9, 6, 5, 7, 4, 0, 3, 0, 0, 5, 0, 0, 2, 5, 6, 1, 6, 4, 6, 1, 0, 7, 4, 8, 7, 7, 9, 3, 3, 0, 5, 8, 0, 4, 3, 3, 1, 8, 3, 2, 6, 5, 6, 6, 1, 3, 7, 9, 5, 7, 7, 4, 8, 1, 6, 7, 8, 4, 7, 2, 8, 8, 4, 7, 1, 5, 4, 1, 1, 8, 8, 1, 9, 9, 1, 0, 7, 0, 0, 4, 1, 0, 6, 7, 0, 8, 3, 3, 6, 0, 7, 3, 6, 3, 2, 0, 7, 6, 5, 1, 4, 5, 2, 7, 9, 3, 1, 6, 7, 4, 9, 3, 6, 5, 2, 8, 9, 1, 0, 0, 1, 7, 0, 6, 2, 6, 5, 7, 5, 0, 7, 5, 7, 9, 0, 0, 7, 7, 3, 2, 5, 1, 5, 9, 2, 2, 0, 7, 8, 0, 2, 6, 2, 9, 6, 9, 4, 4, 6, 1, 7, 3, 2, 0, 5, 0, 2, 2, 2, 6, 8, 6, 7, 8, 4, 7, 6, 6, 2, 5, 3, 2, 3, 6, 5, 6, 4, 2, 9, 0, 0, 9, 1, 2, 9, 9, 0, 1, 5, 3, 2, 3, 5, 0, 8, 1, 1, 6, 4, 8, 1, 9, 3, 3, 3, 8, 8, 0, 1, 5, 7, 1, 4, 6, 9, 4, 6, 3, 9, 6, 4, 7, 1, 7, 2, 0, 7, 9, 8, 3, 5, 2, 1, 2, 2, 6, 5, 5, 7, 6, 2, 9, 8, 2, 7, 1, 6, 4, 6, 9, 2, 9, 0, 4, 8, 4, 9, 1, 6, 9, 2, 0, 5, 2, 6, 0, 7, 3, 5, 4, 0, 0, 4, 2, 4, 5, 0, 5, 5, 8, 4, 6, 4, 4, 8, 8, 7, 5, 8, 7, 8, 9, 7, 4, 7, 0, 7, 3, 3, 2, 9, 8, 1, 8, 2, 7, 2, 4, 9, 6, 3, 4, 4, 4, 8, 9, 4, 6, 7, 9, 1, 9, 5, 2, 2, 6, 1, 4, 0, 2, 9, 6, 7, 9, 6, 8, 4, 8, 4, 3, 9, 2, 3, 4, 0, 0, 3, 8, 6, 1, 0, 0, 9, 9, 8, 0, 1, 6, 0, 2, 3, 9, 6, 9, 2, 8, 4, 5, 6, 5, 9, 0, 7, 5, 1, 9, 6, 5, 9, 0, 5, 1, 2, 3, 1, 8, 4, 2, 8, 3, 3, 8, 5, 8, 9, 2, 0, 9, 4, 8, 8, 0, 7, 6, 6, 8, 3, 1, 4, 7, 3, 7, 6, 2, 6, 3, 3, 1, 7, 2, 3, 9, 3, 7, 1, 7, 3, 0, 7, 2, 2, 7, 1, 1, 9, 4, 2, 0, 9, 4, 8, 6, 1, 5, 4, 9, 1, 4, 4, 4, 6, 0, 9, 1, 3, 1, 1, 1, 4, 5, 6, 8, 8, 5, 5, 6, 0, 2, 3, 9, 3, 0, 1, 4, 3, 9, 5, 9, 8, 0, 8, 1, 1, 6, 7, 1, 3, 1, 6, 7, 4, 1, 5, 1, 0, 3, 7, 8, 0, 9, 8, 4, 4, 8, 2, 8, 7, 1, 8, 4, 7, 0, 6, 0, 4, 6, 4, 7, 5, 6, 8, 5, 9, 9, 4, 5, 2, 6, 3, 2, 0, 0, 1, 3, 0, 0, 0, 1, 3, 2, 9, 3, 8, 1, 8, 6, 5, 6, 2, 7, 1, 8, 5, 4, 1, 9, 2, 7, 7, 0, 6, 9, 3, 6, 5, 0, 6, 1, 0, 9, 0, 4, 4, 8, 5, 9, 9, 2, 1, 4, 9, 8, 0, 8, 4, 7, 0, 0, 4, 9, 4, 6, 1, 1, 0, 5, 6, 3, 4, 5, 6, 0, 9, 6, 3, 5, 7, 3, 3, 7, 3, 4, 3, 2, 5, 6, 7, 0, 7, 1, 0, 5, 8, 0, 3, 8, 4, 6, 5, 1, 9, 2, 3, 9, 9, 1, 4, 6, 0, 0, 4, 9, 8, 5, 5, 5, 5, 6, 0, 5, 0, 9, 6, 1, 1, 9, 6, 7, 2, 2, 8, 1, 7, 1, 8, 3, 8, 4, 8, 6, 2, 2, 4, 1, 1, 6, 1, 2, 1, 4, 3, 0, 4, 9, 3, 3, 2, 4, 7, 1, 4, 1, 2, 4, 2, 7, 3, 5, 8, 6, 8, 2, 0, 2, 6, 3, 1, 2, 3, 7, 0, 1, 1, 5, 7, 0, 5, 1, 8, 6, 0, 9, 8, 6, 1, 9, 3, 3, 7, 0, 5, 0, 1, 6, 9, 3, 8, 3, 2, 6, 7, 9, 7, 9, 3, 6, 8, 0, 3, 3, 0, 9, 6, 4, 4, 6, 5, 9, 2, 6, 4, 2, 7, 1, 5, 9, 1, 8, 1, 0, 6, 9, 7, 1, 6, 9, 9, 8, 4, 2, 8, 2, 5, 5, 5, 6, 0, 6, 7, 2, 8, 3, 7, 6, 9, 8, 1, 2, 5, 8, 1, 9, 2, 0, 7, 6, 6, 6, 5, 2, 9, 8, 5, 9, 5, 4, 8, 8, 3, 8, 6, 5, 4, 8, 9, 3, 6, 2, 0, 3, 2, 4, 2, 4, 8, 7, 8, 1, 5, 7, 2, 0, 0, 9, 2, 6, 5, 1, 4, 7, 0, 6, 9, 3, 5, 9, 3, 2, 1, 8, 2, 4, 9, 3, 5, 4, 4, 9, 5, 2, 5, 7, 5, 9, 0, 3, 9, 7, 0, 9, 1, 7, 2, 2, 4, 2, 1, 9, 3, 0, 8, 7, 8, 4, 3, 1, 0, 1, 8, 9, 8, 2, 1, 4, 7, 6, 4, 2, 2, 9, 3, 3, 3, 5, 6, 8, 3, 0, 8, 4, 8, 3, 9, 8, 1, 7, 0, 3, 5, 2, 4, 4, 5, 3, 3, 7, 1, 3, 0, 1, 0, 4, 5, 5, 7, 0, 1, 4, 4, 5, 7, 4, 5, 6, 6, 5, 0, 1, 1, 1, 8, 7, 5, 7, 3, 5, 2, 9, 2, 2, 4, 7, 6, 4, 7, 2, 8, 6, 2, 4, 3, 6, 5, 3, 8, 3, 2, 7, 3, 1, 9, 4, 9, 0, 6, 6, 6, 4, 1, 5, 1, 0, 7, 4, 7, 3, 0, 5, 2, 0, 3, 9, 0, 0, 3, 2, 0, 8, 2, 6, 7, 6, 1, 4, 9, 0, 7, 0, 5, 6, 9, 3, 3, 1, 6, 9, 1, 7, 7, 8, 1, 3, 5, 1, 2, 6, 2, 3, 9, 7, 1, 1, 8, 1, 7, 5, 0, 8, 4, 9, 7, 8, 3, 2, 7, 0, 2, 0, 7, 5, 3, 1, 7, 4, 8, 3, 0, 5, 8, 5, 0, 3, 7, 2, 7, 0, 3, 7, 5, 8, 9, 2, 8, 7, 0, 8, 4, 3, 0, 0, 5, 7, 8, 0, 1, 6, 1, 1, 1, 8, 1, 6, 2, 5, 5, 6, 1, 3, 4, 0, 7, 6, 7, 4, 9, 6, 0, 9, 3, 7, 8, 7, 9, 5, 2, 0, 7, 6, 2, 6, 8, 5, 5, 6, 7, 0, 5, 1, 5, 9, 3, 9, 9, 8, 8, 3, 0, 4, 3, 0, 9, 7, 5, 2, 2, 5, 6, 8, 4, 7, 5, 1, 4, 4, 1, 2, 9, 4, 9, 2, 6, 6, 2, 9, 5, 9, 2, 1, 8, 9, 8, 5, 4, 9, 5, 2, 9, 9, 0, 9, 0, 5, 0, 5, 1, 5, 8, 2, 8, 4, 9, 2, 9, 1, 1, 4, 6, 3, 7, 4, 8, 5, 0, 9, 6, 2, 3, 4, 3, 3, 7, 0, 5, 6, 9, 4, 1, 2, 4, 1, 4, 3, 2, 4, 5, 9, 3, 1, 9, 1, 7, 7, 0, 0, 5, 2, 5, 4, 3, 6, 4, 3, 5, 1, 5, 4, 0, 1, 1, 5, 9, 9, 1, 4, 8, 0, 4, 5, 5, 4, 6, 6, 6, 3, 4, 8, 4, 2, 1, 0, 4, 2, 9, 5, 7, 1, 7, 2, 6, 5, 8, 3, 0, 4, 5, 3, 2, 8, 8, 4, 7, 2, 4, 7, 4, 4, 0, 3, 0, 0, 0, 2, 2, 0, 2, 4, 4, 5, 2, 0, 4, 7, 1, 7, 3, 2, 7, 6, 2, 6, 5, 9, 5, 8, 5, 2, 6, 0, 3, 6, 3, 9, 5, 9, 8, 1, 7, 7, 6, 1, 1, 2, 8, 6, 4, 5, 7, 5, 2, 9, 7, 1, 1, 8, 2, 7, 5, 0, 5, 8, 8, 8, 7, 0, 9, 4, 3, 2, 7, 3, 5, 9, 9, 1, 0, 0, 3, 6, 6, 9, 1, 0, 3, 7, 9, 6, 2, 6, 7, 2, 2, 2, 9, 3, 6, 0, 0, 3, 9, 5, 5, 8, 2, 9, 3, 0, 9, 3, 3, 4, 8, 2, 4, 7, 8, 6, 6, 7, 2, 5, 1, 2, 7, 6, 3, 3, 6, 8, 4, 8, 9, 3, 7, 6, 3, 0, 9, 7, 9, 8, 1, 2, 9, 1, 0, 9, 0, 6, 7, 9, 7, 9, 4, 1, 6, 3, 3, 8, 8, 3, 3, 9, 5, 9, 6, 7, 4, 0, 6, 6, 5, 0, 8, 2, 0, 2, 2, 8, 6, 2, 3, 7, 9, 3, 7, 2, 0, 6, 2, 9, 5, 3, 8, 2, 3, 2, 7, 0, 4, 5, 1, 5, 7, 8, 7, 0, 4, 2, 0, 6, 6, 9, 2, 6, 9, 1, 0, 6, 3, 0, 4, 0, 7, 3, 7, 6, 6, 2, 7, 1, 4, 5, 2, 9, 9, 0, 7, 0, 6, 7, 3, 2, 0, 9, 3, 9, 3, 9, 9, 9, 2, 1, 5, 6, 8, 7, 5, 5, 3, 6, 6, 3, 3, 1, 6, 5, 4, 2, 5, 5, 5, 1, 2, 8, 2, 7, 1, 4, 1, 3, 4, 2, 5, 7, 8, 1, 7, 7, 4, 3, 4, 4, 0, 7, 3, 0, 4, 6, 3, 0, 1, 5, 6, 6, 7, 5, 6, 9, 2, 1, 3, 6, 8, 7, 6, 3, 6, 5, 9, 8, 5, 7, 1, 5, 8, 3, 6, 9, 4, 9, 6, 2, 3, 9, 3, 0, 2, 6, 4, 8, 8, 3, 8, 6, 5, 2, 6, 4, 4, 3, 4, 5, 9, 5, 0, 0, 8, 8, 5, 2, 4, 7, 1, 9, 7, 3, 5, 1, 5, 9, 3, 1, 3, 8, 7, 2, 6, 1, 5, 4, 3, 7, 6, 0, 8, 9, 3, 6, 6, 5, 9, 4, 1, 4, 4, 2, 7, 2, 3, 5, 7, 0, 3, 6, 4, 1, 7, 0, 0, 7, 0, 5, 7, 0, 2, 6, 1, 2, 5, 4, 4, 8, 4, 4, 5, 2, 4, 0, 4, 9, 6, 9, 8, 0, 1, 3, 8, 8, 3, 4, 8, 5, 5, 6, 0, 5, 0, 4, 8, 0, 4, 6, 0, 0, 0, 1, 1, 3, 3, 2, 5, 4, 6, 3, 7, 6, 9, 2, 4, 8, 4, 2, 4, 5, 4, 4, 0, 3, 2, 5, 5, 0, 1, 0, 3, 8, 4, 1, 2, 4, 1, 3, 0, 1, 8, 1, 2, 0, 1, 4, 2, 8, 3, 3, 9, 9, 1, 2, 3, 0, 1, 2, 3, 5, 6, 2, 5, 4, 4, 9, 4, 3, 9, 3, 9, 4, 2, 8, 7, 0, 2, 2, 8, 8, 3, 3, 3, 4, 7, 5, 3, 7, 6, 8, 4, 0, 3, 9, 6, 9, 4, 8, 9, 3, 4, 6, 9, 7, 4, 3, 9, 5, 7, 6, 1, 4, 5, 4, 4, 6, 6, 8, 7, 9, 8, 6, 2, 7, 6, 1, 4, 4, 5, 2, 2, 1, 7, 7, 9, 2, 5, 8, 9, 2, 8, 5, 4, 6, 3, 9, 5, 3, 1, 1, 5, 5, 1, 9, 3, 2, 8, 9, 3, 8, 4, 2, 7, 4, 9, 1, 4, 5, 0, 5, 1, 9, 8, 7, 7, 5, 0, 6, 5, 0, 4, 4, 4, 6, 6, 5, 4, 9, 0, 6, 3, 6, 1, 9, 7, 6, 5, 4, 1, 2, 4, 5, 1, 8, 4, 9, 7, 8, 2, 2, 8, 2, 5, 4, 2, 3, 6, 3, 3, 0, 8, 7, 6, 1, 4, 6, 0, 7, 6, 7, 7, 2, 1, 9, 9, 0, 6, 2, 3, 6, 1, 8, 6, 4, 5, 8, 5, 6, 6, 4, 5, 6, 2, 7, 8, 1, 4, 3, 9, 1, 9, 5, 2, 5, 3, 2, 6, 9, 3, 6, 2, 6, 9, 3, 4, 7, 6, 3, 1, 4, 4, 6, 2, 0, 2, 0, 5, 0, 3, 7, 4, 1, 7, 3, 0, 6, 5, 5, 6, 7, 5, 3, 6, 1, 7, 9, 5, 6, 2, 8, 1, 9, 2, 7, 3, 4, 4, 6, 7, 4, 0, 2, 1, 7, 2, 2, 0, 0, 6, 8, 7, 8, 6, 3, 6, 2, 5, 8, 3, 0, 3, 0, 9, 3, 4, 6, 4, 5, 8, 9, 1, 3, 2, 4, 8, 6, 8, 1, 1, 1, 9, 0, 2, 5, 8, 2, 6, 8, 3, 4, 0, 0, 4, 9, 3, 4, 0, 1, 8, 3, 4, 5, 8, 1, 6, 0, 0, 8, 9, 3, 6, 0, 5, 3, 4, 9, 0, 4, 0, 6, 4, 7, 8, 1, 5, 3, 2, 4, 2, 5, 3, 0, 9, 3, 3, 9, 1, 0, 6, 0, 6, 4, 9, 2, 6, 0, 4, 8, 4, 1, 8, 6, 2, 6, 0, 3, 3, 0, 5, 6, 8, 1, 7, 0, 1, 8, 1, 9, 6, 4, 0, 6, 3, 4, 6, 3, 8, 5, 0, 7, 7, 1, 5, 8, 7, 2, 1, 1, 5, 8, 3, 2, 6, 1, 8, 3, 0, 1, 5, 2, 3, 3, 7, 2, 3, 1, 3, 1, 4, 2, 3, 2, 5, 0, 2, 2, 9, 1, 9, 2, 7, 5, 1, 0, 0, 2, 8, 1, 6, 4, 8, 1, 2, 0, 7, 6, 7, 6, 9, 9, 0, 6, 4, 3, 4, 4, 0, 0, 8, 3, 4, 6, 7, 9, 1, 6, 9, 3, 9, 6, 5, 3, 5, 4, 8, 7, 6, 4, 5, 8, 1, 6, 4, 2, 1, 9, 2, 9, 2, 1, 6, 2, 8, 3, 6, 0, 5, 1, 4, 2, 9, 5, 6, 3, 7, 6, 1, 7, 2, 6, 3, 4, 0, 9, 8, 8, 6, 9, 1, 1, 7, 3, 8, 7, 9, 6, 2, 0, 1, 9, 8, 2, 1, 7, 4, 3, 8, 1, 7, 3, 1, 2, 1, 3, 4, 0, 5, 5, 2, 7, 7, 9, 3, 8, 0, 8, 0, 1, 5, 1, 4, 0, 1, 5, 5, 8, 6, 2, 1, 3, 6, 7, 2, 5, 7, 6, 0, 2, 9, 0, 5, 7, 1, 3, 4, 1, 1, 1, 9, 0, 5, 4, 2, 4, 1, 6, 8, 3, 1, 6, 9, 5, 7, 2, 4, 3, 4, 0, 5, 9, 2, 7, 7, 6, 7, 2, 2, 4, 9, 3, 9, 1, 0, 2, 1, 0, 0, 5, 9, 1, 8, 0, 4, 1, 5, 6, 4, 7, 6, 7, 5, 9, 3, 6, 2, 0, 1, 2, 9, 4, 2, 4, 4, 2, 1, 9, 8, 3, 0, 1, 0, 2, 9, 9, 7, 2, 9, 8, 7, 9, 5, 8, 3, 5, 6, 7, 1, 4, 4, 7, 0, 6, 2, 7, 9, 9, 8, 9, 8, 0, 9, 9, 8, 8, 4, 3, 2, 7, 5, 7, 0, 1, 6, 1, 8, 0, 8, 2, 5, 9, 1, 9, 1, 3, 2, 8, 4, 7, 3, 3, 2, 0, 0, 2, 1, 1, 1, 0, 6, 7, 6, 3, 8, 0, 6, 2, 4, 2, 1, 5, 5, 8, 6, 9, 8, 0, 5, 1, 9, 8, 5, 3, 0, 5, 3, 4, 0, 4, 1, 6, 2, 0, 9, 6, 7, 3, 9, 9, 7, 9, 6, 7, 1, 2, 0, 2, 6, 3, 3, 2, 9, 7, 4, 8, 6, 1, 1, 7, 0, 5, 3, 1, 8, 0, 7, 7, 1, 4, 1, 9, 2, 3, 6, 0, 0, 4, 1, 8, 2, 6, 5, 8, 0, 3, 3, 8, 8, 3, 6, 2, 2, 2, 4, 3, 9, 4, 9, 1, 2, 2, 7, 6, 2, 5, 0, 6, 8, 7, 0, 4, 5, 7, 1, 4, 1, 2, 9, 9, 7, 2, 5, 5, 9, 7, 1, 6, 8, 0, 4, 1, 1, 0, 2, 9, 9, 6, 1, 1, 4, 7, 0, 8, 8, 2, 3, 3, 2, 0, 9, 8, 7, 8, 4, 1, 0, 5, 4, 2, 4, 4, 4, 3, 6, 4, 6, 7, 3, 7, 5, 6, 8, 5, 1, 8, 8, 1, 5, 3, 9, 4, 1, 3, 9, 3, 3, 2, 3, 1, 3, 9, 6, 1, 2, 5, 6, 9, 8, 5, 0, 6, 2, 6, 2, 8, 2, 4, 8, 1, 3, 9, 2, 9, 4, 2, 5, 3, 7, 9, 3, 1, 5, 7, 0, 9, 8, 4, 5, 7, 6, 9, 5, 2, 6, 4, 0, 4, 3, 4, 0, 0, 9, 2, 4, 3, 9, 5, 3, 0, 3, 5, 1, 8, 9, 6, 4, 9, 3, 6, 1, 7, 5, 7, 1, 3, 8, 4, 0, 6, 9, 9, 2, 9, 0, 2, 4, 4, 2, 1, 7, 2, 4, 7, 7, 5, 4, 1, 0, 4, 9, 8, 4, 2, 1, 2, 7, 2, 6, 6, 1, 2, 3, 6, 3, 3, 5, 6, 6, 2, 3, 8, 5, 6, 0, 5, 9, 8, 2, 3, 6, 2, 9, 7, 9, 4, 1, 3, 7, 4, 7, 4, 3, 0, 5, 9, 7, 6, 0, 5, 9, 3, 7, 2, 8, 9, 7, 3, 5, 4, 8, 3, 4, 6, 4, 6, 7, 4, 9, 0, 3, 7, 4, 1, 7, 9, 8, 8, 5, 6, 2, 6, 5, 1, 9, 1, 4, 8, 7, 4, 3, 5, 5, 5, 2, 8, 6, 2, 8, 9, 5, 0, 5, 3, 4, 0, 2, 4, 7, 6, 7, 0, 3, 9, 9, 2, 9, 6, 5, 5, 9, 1, 7, 3, 3, 0, 3, 6, 4, 9, 9, 0, 4, 3, 9, 7, 5, 3, 5, 3, 8, 1, 6, 3, 0, 5, 9, 7, 3, 7, 5, 7, 0, 6, 6, 6, 3, 1, 4, 0, 3, 9, 7, 0, 6, 5, 8, 7, 6, 3, 8, 2, 6, 6, 8, 3, 2, 8, 7, 3, 0, 3, 1, 7, 9, 1, 3, 5, 9, 0, 4, 6, 8, 3, 3, 2, 9, 1, 7, 0, 5, 2, 4, 0, 5, 4, 5, 2, 2, 9, 5, 2, 8, 1, 8, 7, 4, 1, 5, 2, 6, 1, 7, 1, 0, 7, 0, 5, 4, 0, 7, 8, 7, 4, 1, 4, 3, 4, 5, 9, 1, 3, 8, 8, 9, 6, 7, 3, 2, 1, 7, 9, 2, 3, 9, 9, 2, 7, 2, 1, 7, 2, 6, 8, 6, 2, 4, 0, 1, 7, 3, 8, 6, 4, 7, 6, 7, 2, 2, 3, 2, 4, 6, 6, 6, 2, 2, 5, 8, 6, 2, 8, 9, 2, 0, 2, 7, 1, 0, 9, 3, 5, 1, 0, 1, 8, 4, 3, 2, 8, 8, 9, 5, 1, 6, 8, 8, 1, 2, 5, 6, 1, 7, 2, 8, 7, 7, 0, 1, 3, 7, 4, 3, 2, 2, 5, 7, 1, 8, 1, 3, 2, 9, 6, 9, 1, 9, 2, 6, 2, 3, 4, 0, 3, 0, 9, 9, 1, 7, 8, 3, 2, 8, 1, 6, 6, 0, 9, 0, 9, 1, 9, 3, 5, 7, 9, 2, 1, 5, 4, 0, 0, 3, 6, 0, 3, 3, 8, 7, 3, 4, 9, 8, 7, 9, 9, 2, 9, 9, 8, 3, 8, 3, 0, 1, 8, 9, 5, 9, 9, 6, 1, 5, 1, 8, 0, 7, 8, 9, 2, 7, 1, 8, 1, 2, 9, 2, 7, 5, 5, 2, 2, 9, 7, 1, 0, 6, 3, 8, 2, 2, 1, 1, 0, 7, 9, 3, 3, 0, 5, 4, 3, 5, 2, 2, 3, 6, 0, 6, 1, 8, 0, 5, 0, 1, 6, 4, 2, 9, 3, 3, 8, 2, 6, 8, 6, 7, 4, 1, 2, 5, 9, 1, 9, 0, 7, 3, 0, 1, 5, 3, 8, 1, 1, 1, 1, 6, 1, 4, 1, 3, 5, 0, 7, 9, 8, 6, 9, 3, 1, 5, 9, 1, 9, 5, 5, 1, 3, 4, 1, 1, 6, 2, 2, 6, 6, 6, 6, 1, 9, 5, 7, 8, 1, 3, 1, 8, 7, 7, 2, 0, 7, 9, 1, 8, 8, 7, 8, 3, 4, 1, 0, 0, 4, 0, 7, 6, 9, 9, 2, 2, 6, 2, 3, 5, 2, 6, 1, 1, 0, 1, 0, 3, 8, 0, 6, 8, 0, 6, 9, 5, 4, 6, 9, 4, 6, 9, 7, 9, 8, 8, 4, 7, 2, 7, 2, 8, 3, 6, 2, 5, 8, 4, 8, 8, 8, 8, 6, 8, 2, 7, 0, 3, 6, 6, 8, 8, 2, 6, 3, 0, 3, 3, 9, 5, 7, 8, 5, 4, 9, 7, 6, 4, 3, 8, 6, 8, 6, 7, 3, 7, 5, 7, 3, 8, 3, 4, 4, 3, 0, 7, 0, 5, 1, 8, 9, 0, 5, 7, 0, 0, 3, 5, 5, 4, 8, 3, 4, 3, 9, 8, 0, 1, 1, 8, 7, 2, 9, 0, 2, 4, 8, 1, 9, 1, 6, 1, 6, 1, 0, 4, 0, 3, 4, 6, 5, 0, 7, 7, 9, 7, 5, 9, 6, 3, 7, 8, 3, 9, 0, 8, 2, 6, 0, 4, 0, 2, 5, 2, 3, 3, 3, 4, 3, 7, 0, 8, 4, 7, 6, 2, 3, 2, 9, 3, 5, 7, 9, 2, 3, 1, 9, 4, 6, 3, 7, 7, 6, 1, 2, 2, 4, 9, 1, 0, 3, 1, 2, 0, 3, 8, 1, 2, 2, 0, 6, 4, 6, 1, 5, 0, 3, 1, 3, 1, 7, 0, 0, 3, 6, 2, 6, 2, 8, 7, 5, 8, 1, 8, 7, 2, 9, 8, 9, 4, 6, 6, 5, 0, 4, 9, 9, 8, 6, 4, 2, 1, 1, 8, 5, 1, 5, 0, 9, 9, 6, 0, 1, 5, 7, 3, 5, 8, 3, 1, 1, 0, 6, 5, 0, 5, 9, 5, 8, 5, 0, 6, 6, 8, 0, 6, 6, 3, 6, 1, 8, 1, 3, 9, 5, 0, 4, 6, 2, 5, 1, 9, 3, 9, 2, 0, 2, 7, 1, 1, 0, 0, 7, 9, 1, 9, 7, 4, 3, 1, 9, 2, 9, 2, 0, 6, 3, 4, 7, 2, 6, 0, 8, 1, 3, 4, 4, 6, 6, 2, 4, 1, 4, 4, 3, 6, 3, 5, 9, 4, 0, 1, 2, 3, 1, 6, 3, 1, 1, 2, 1, 6, 6, 2, 9, 8, 5, 4, 8, 5, 0, 2, 8, 9, 3, 9, 5, 9, 8, 5, 4, 9, 2, 1, 4, 6, 9, 1, 8, 2, 4, 3, 5, 2, 8, 6, 1, 5, 9, 7, 5, 8, 8, 4, 0, 2, 8, 7, 4, 1, 9, 3, 9, 0, 0, 6, 7, 2, 2, 6, 7, 2, 9, 3, 1, 1, 5, 1, 2, 7, 5, 7, 8, 4, 6, 9, 1, 4, 9, 9, 5, 4, 1, 1, 8, 4, 5, 3, 6, 5, 0, 0, 9, 6, 9, 6, 5, 6, 8, 9, 5, 2, 2, 8, 2, 8, 7, 3, 3, 9, 3, 5, 5, 0, 9, 4, 6, 9, 5, 5, 7, 3, 0, 5, 6, 6, 0, 0, 4, 2, 4, 5, 0, 1, 8, 2, 9, 4, 0, 8, 4, 0, 8, 0, 8, 4, 1, 7, 9, 0, 5, 4, 1, 9, 0, 7, 3, 3, 5, 4, 1, 8, 1, 0, 2, 1, 6, 7, 6, 8, 9, 0, 2, 9, 3, 2, 5, 8, 9, 7, 2, 9, 4, 3, 6, 1, 2, 8, 6, 2, 3, 8, 0, 7, 6, 4, 2, 7, 9, 4, 0, 8, 6, 7, 1, 5, 1, 7, 7, 5, 0, 7, 7, 2, 1, 2, 6, 1, 2, 8, 6, 1, 3, 8, 9, 2, 2, 1, 6, 8, 4, 3, 9, 8, 1, 0, 8, 4, 7, 7, 9, 6, 3, 7, 6, 1, 5, 0, 7, 8, 2, 6, 7, 0, 0, 6, 7, 9, 7, 4, 8, 3, 7, 1, 1, 7, 8, 2, 4, 5, 1, 9, 7, 2, 7, 7, 0, 5, 7, 8, 0, 6, 0, 2, 2, 1, 5, 3, 7, 8, 1, 6, 8, 1, 1, 2, 5, 8, 2, 1, 9, 7, 0, 5, 3, 9, 0, 3, 5, 3, 1, 0, 9, 5, 0, 5, 9, 0, 9, 5, 6, 5, 0, 4, 9, 9, 8, 9, 7, 5, 1, 4, 7, 8, 5, 1, 7, 3, 2, 9, 9, 6, 9, 8, 6, 4, 0, 6, 6, 8, 4, 2, 1, 7, 4, 0, 2, 1, 0, 8, 9, 8, 1, 3, 9, 7, 8, 2, 2, 2, 3, 9, 4, 3, 6, 1, 9, 4, 4, 3, 1, 4, 9, 8, 1, 2, 0, 6, 6, 3, 6, 1, 9, 1, 5, 6, 2, 9, 4, 7, 0, 9, 4, 0, 0, 5, 5, 2, 1, 1, 8, 5, 4, 7, 7, 7, 2, 1, 2, 6, 3, 4, 0, 5, 7, 3, 7, 2, 7, 7, 3, 7, 5, 1, 0, 0, 8, 8, 7, 0, 4, 4, 3, 2, 1, 2, 1, 2, 2, 7, 8, 3, 7, 6, 5, 6, 2, 8, 5, 0, 2, 6, 7, 4, 3, 6, 1, 9, 0, 6, 6, 9, 4, 2, 0, 7, 4, 7, 5, 1, 0, 1, 0, 4, 9, 8, 1, 2, 1, 6, 3, 7, 9, 4, 2, 3, 6, 4, 2, 1, 3, 9, 1, 1, 6, 5, 3, 1, 6, 2, 5, 3, 8, 4, 4, 8, 2, 5, 2, 7, 4, 8, 9, 9, 6, 5, 4, 5, 0, 0, 8, 2, 2, 6, 4, 6, 6, 9, 7, 1, 9, 4, 8, 3, 8, 6, 8, 6, 0, 2, 3, 1, 4, 1, 3, 7, 1, 9, 6, 6, 1, 8, 4, 9, 9, 1, 5, 8, 5, 9, 5, 0, 4, 3, 0, 9, 2, 5, 6, 0, 8, 6, 8, 8, 7, 4, 7, 1, 5, 8, 3, 2, 3, 6, 2, 2, 7, 0, 8, 6, 7, 6, 4, 0, 4, 6, 0, 1, 1, 9, 6, 3, 1, 0, 2, 6, 5, 4, 3, 9, 1, 5, 6, 2, 3, 6, 5, 5, 3, 4, 0, 0, 0, 8, 8, 8, 4, 7, 4, 5, 4, 6, 5, 6, 7, 4, 2, 0, 2, 0, 9, 2, 9, 0, 8, 5, 8, 9, 0, 2, 1, 3, 2, 6, 7, 9, 9, 8, 7, 9, 9, 7, 0, 4, 9, 1, 6, 7, 5, 2, 4, 1, 0, 6, 6, 9, 0, 4, 9, 9, 1, 6, 1, 5, 9, 7, 3, 2, 9, 6, 2, 8, 0, 6, 9, 6, 4, 1, 0, 1, 1, 3, 0, 8, 9, 0, 9, 9, 4, 8, 0, 2, 3, 4, 1, 4, 7, 8, 0, 5, 8, 8, 2, 5, 0, 2, 3, 4, 2, 1, 2, 1, 3, 6, 7, 4, 5, 5, 5, 9, 9, 5, 5, 2, 1, 9, 6, 2, 4, 8, 6, 7, 7, 8, 7, 9, 2, 8, 5, 4, 3, 8, 9, 6, 5, 7, 6, 1, 3, 1, 4, 6, 1, 3, 8, 5, 2, 1, 6, 3, 3, 4, 2, 2, 9, 6, 7, 6, 0, 0, 7, 8, 5, 6, 2, 6, 6, 7, 3, 4, 5, 2, 8, 1, 2, 7, 1, 5, 7, 2, 8, 0, 5, 1, 3, 4, 6, 6, 9, 2, 1, 6, 4, 1, 9, 6, 0, 6, 8, 4, 8, 2, 9, 7, 0, 0, 3, 7, 6, 1, 7, 5, 5, 5, 9, 2, 2, 0, 6, 3, 5, 4, 4, 8, 2, 1, 6, 3, 8, 8, 6, 6, 9, 2, 1, 8, 9, 4, 1, 5, 4, 1, 6, 5, 1, 5, 6, 6, 7, 4, 1, 2, 8, 5, 9, 1, 7, 6, 8, 1, 3, 4, 1, 1, 2, 6, 2, 8, 5, 6, 0, 6, 6, 7, 2, 6, 9, 8, 2, 2, 3, 8, 6, 9, 5, 0, 9, 5, 8, 2, 6, 7, 6, 2, 8, 9, 3, 0, 0, 1, 2, 2, 9, 2, 5, 0, 9, 5, 9, 5, 5, 1, 1, 1, 3, 1, 5, 3, 0, 9, 6, 2, 6, 2, 7, 0, 8, 7, 6, 4, 3, 5, 3, 0, 4, 9, 3, 9, 1, 5, 9, 1, 2, 3, 3, 2, 1, 1, 3, 9, 4, 5, 5, 9, 6, 9, 3, 5, 1, 4, 4, 6, 3, 8, 8, 3, 5, 9, 2, 4, 4, 3, 0, 5, 6, 3, 4, 2, 1, 3, 0, 8, 1, 6, 4, 0, 5, 7, 7, 3, 3, 2, 4, 2, 3, 9, 4, 9, 4, 0, 5, 4, 4, 8, 7, 0, 4, 7, 4, 9, 4, 7, 3, 0, 0, 9, 0, 1, 1, 5, 7, 1, 7, 4, 7, 4, 4, 5, 4, 0, 5, 0, 7, 6, 7, 2, 7, 1, 9, 0, 8, 0, 3, 6, 0, 0, 3, 8, 7, 0, 6, 2, 2, 0, 8, 8, 0, 0, 2, 4, 6, 8, 0, 8, 8, 3, 4, 5, 4, 2, 3, 2, 7, 2, 7, 7, 6, 0, 8, 8, 3, 5, 8, 6, 5, 7, 6, 3, 2, 8, 2, 9, 6, 5, 1, 1, 3, 6, 0, 2, 8, 9, 9, 3, 7, 8, 2, 5, 5, 3, 1, 8, 8, 7, 8, 0, 1, 5, 5, 3, 5, 2, 1, 4, 8, 1, 1, 3, 3, 6, 1, 0, 0, 5, 1, 6, 5, 8, 7, 5, 5, 0, 9, 3, 3, 0, 6, 4, 4, 9, 8, 0, 4, 2, 4, 2, 1, 0, 0, 4, 1, 9, 6, 1, 3, 1, 8, 5, 3, 9, 4, 1, 2, 9, 6, 7, 9, 9, 3, 7, 2, 9, 3, 7, 1, 7, 0, 8, 8, 8, 7, 6, 8, 4, 1, 9, 6, 0, 6, 8, 4, 9, 2, 1, 2, 8, 8, 3, 9, 1, 3, 3, 2, 9, 1, 0, 2, 3, 3, 2, 4, 6, 4, 2, 7, 9, 9, 5, 4, 0, 2, 9, 7, 5, 9, 2, 6, 0, 6, 1, 3, 7, 5, 7, 2, 8, 4, 8, 6, 6, 6, 5, 4, 6, 7, 4, 3, 7, 4, 8, 1, 3, 4, 0, 5, 0, 6, 9, 4, 0, 3, 7, 7, 2, 8, 9, 9, 4, 5, 8, 7, 9, 2, 7, 7, 5, 1, 4, 8, 5, 6, 8, 9, 0, 4, 1, 0, 5, 5, 6, 1, 4, 6, 6, 5, 8, 4, 7, 5, 4, 8, 5, 2, 7, 1, 1, 2, 4, 7, 6, 8, 9, 4, 1, 6, 0, 9, 0, 0, 1, 6, 6, 0, 1, 9, 5, 8, 4, 2, 8, 4, 2, 0, 8, 9, 3, 0, 8, 1, 1, 6, 5, 2, 4, 3, 2, 2, 0, 4, 4, 0, 4, 4, 7, 7, 4, 0, 7, 5, 3, 2, 8, 8, 0, 1, 3, 7, 8, 4, 7, 4, 3, 4, 3, 8, 0, 8, 5, 2, 0, 5, 7, 7, 5, 6, 6, 5, 1, 9, 7, 1, 2, 1, 5, 0, 6, 9, 6, 8, 0, 6, 7, 1, 6, 3, 6, 3, 9, 7, 6, 4, 3, 9, 5, 9, 3, 6, 9, 7, 4, 1, 1, 4, 5, 2, 9, 6, 6, 1, 2, 4, 4, 1, 6, 4, 1, 4, 4, 4, 9, 9, 7, 8, 5, 3, 3, 6, 5, 7, 9, 6, 4, 0, 2, 5, 1, 4, 9, 6, 0, 4, 4, 2, 5, 6, 5, 6, 4, 3, 9, 4, 8, 2, 1, 3, 0, 1, 7, 0, 6, 8, 5, 7, 2, 3, 6, 5, 8, 8, 7, 7, 8, 0, 9, 4, 5, 4, 8, 8, 9, 6, 0, 8, 2, 8, 8, 7, 6, 2, 3, 2, 9, 6, 9, 3, 1, 0, 3, 1, 9, 9, 6, 0, 9, 1, 5, 7, 7, 1, 9, 9, 9, 5, 2, 0, 2, 7, 4, 5, 7, 4, 5, 5, 5, 8, 7, 1, 3, 4, 2, 1, 0, 7, 7, 3, 6, 1, 3, 5, 8, 7, 9, 6, 9, 5, 3, 5, 6, 2, 7, 7, 8, 7, 0, 2, 4, 9, 4, 2, 4, 4, 6, 0, 1, 1, 9, 1, 3, 4, 8, 1, 8, 8, 0, 3, 3, 2, 5, 2, 5, 4, 3, 8, 7, 2, 7, 7, 4, 8, 2, 0, 8, 5, 5, 3, 6, 8, 0, 9, 4, 1, 7, 1, 4, 4, 8, 8, 0, 6, 3, 5, 5, 8, 4, 1, 6, 8, 5, 0, 3, 3, 2, 3, 6, 3, 0, 3, 3, 6, 2, 5, 6, 1, 2, 1, 6, 7, 3, 7, 9, 7, 1, 6, 8, 8, 2, 9, 3, 9, 0, 5, 6, 6, 3, 2, 8, 6, 1, 6, 3, 3, 9, 8, 8, 1, 0, 7, 7, 4, 8, 7, 5, 1, 6, 2, 5, 5, 8, 8, 5, 4, 6, 0, 9, 6, 0, 1, 6, 8, 3, 9, 8, 0, 5, 2, 6, 6, 2, 7, 2, 1, 9, 8, 4, 5, 1, 9, 2, 5, 6, 0, 8, 9, 1, 9, 2, 8, 3, 8, 1, 1, 9, 6, 8, 5, 6, 8, 3, 3, 7, 5, 0, 8, 1, 2, 2, 6, 6, 0, 1, 4, 7, 3, 5, 2, 9, 1, 8, 5, 6, 5, 5, 5, 9, 3, 3, 2, 5, 2, 5, 2, 6, 8, 9, 7, 5, 6, 4, 7, 5, 0, 4, 4, 1, 5, 0, 0, 7, 0, 2, 7, 9, 2, 6, 7, 3, 8, 5, 3, 5, 8, 9, 6, 9, 9, 0, 7, 0, 5, 6, 9, 3, 7, 6, 9, 0, 9, 7, 9, 9, 9, 6, 8, 2, 5, 1, 1, 8, 7, 7, 1, 3, 3, 7, 5, 0, 0, 7, 3, 4, 0, 7, 0, 7, 6, 5, 6, 5, 3, 1, 7, 9, 3, 4, 9, 8, 9, 9, 5, 9, 2, 4, 6, 7, 5, 9, 4, 2, 3, 2, 7, 8, 4, 5, 6, 9, 9, 7, 4, 3, 6, 2, 1, 7, 2, 8, 7, 0, 3, 1, 1, 0, 9, 4, 7, 5, 3, 3, 7, 4, 5, 2, 0, 4, 3, 1, 3, 3, 9, 2, 1, 2, 8, 3, 1, 6, 4, 0, 2, 5, 3, 0, 1, 0, 2, 4, 8, 3, 1, 4, 7, 4, 3, 2, 6, 3, 4, 1, 0, 4, 3, 1, 3, 8, 1, 5, 9, 5, 4, 9, 6, 2, 7, 7, 0, 8, 4, 8, 3, 0, 0, 0, 1, 5, 7, 3, 4, 2, 0, 8, 0, 0, 2, 7, 0, 9, 0, 7, 5, 6, 5, 5, 6, 0, 7, 2, 7, 7, 5, 6, 9, 0, 1, 8, 5, 6, 1, 9, 1, 3, 4, 3, 2, 4, 1, 9, 1, 2, 8, 9, 1, 9, 6, 2, 9, 2, 8, 4, 6, 2, 2, 9, 9, 5, 5, 6, 0, 2, 2, 8, 1, 3, 1, 5, 6, 7, 2, 6, 2, 1, 0, 2, 4, 8, 3, 0, 7, 2, 6, 3, 2, 8, 4, 2, 1, 7, 9, 2, 0, 3, 3, 9, 3, 3, 1, 9, 9, 2, 0, 3, 6, 0, 4, 1, 8, 4, 9, 3, 7, 2, 4, 5, 5, 7, 4, 9, 3, 4, 6, 1, 3, 0, 1, 9, 3, 5, 6, 0, 9, 4, 1, 1, 9, 4, 1, 2, 6, 3, 2, 9, 1, 0, 2, 8, 9, 1, 5, 7, 6, 2, 2, 1, 8, 8, 6, 2, 4, 2, 4, 9, 9, 9, 7, 2, 2, 1, 9, 6, 9, 0, 9, 0, 1, 6, 5, 1, 0, 7, 2, 3, 5, 3, 3, 5, 9, 2, 7, 0, 6, 3, 4, 4, 4, 0, 3, 7, 5, 0, 5, 0, 4, 5, 1, 7, 2, 9, 5, 2, 2, 4, 2, 2, 0, 0, 9, 2, 7, 6, 9, 0, 0, 3, 9, 4, 9, 1, 5, 3, 7, 3, 6, 1, 1, 2, 3, 8, 9, 8, 2, 5, 4, 9, 3, 9, 9, 3, 7, 4, 4, 5, 1, 0, 6, 2, 2, 1, 8, 8, 7, 1, 5, 6, 5, 1, 6, 4, 0, 5, 1, 8, 9, 4, 1, 6, 5, 5, 5, 7, 3, 3, 4, 5, 3, 0, 3, 6, 5, 1, 7, 4, 0, 9, 9, 7, 2, 6, 7, 7, 3, 4, 7, 7, 7, 6, 5, 5, 6, 2, 7, 2, 4, 0, 6, 5, 5, 5, 8, 7, 4, 3, 0, 2, 8, 5, 0, 1, 2, 6, 6, 4, 9, 1, 9, 9, 9, 5, 2, 1, 7, 8, 8, 4, 6, 9, 7, 9, 4, 3, 4, 8, 9, 6, 7, 3, 3, 8, 7, 3, 1, 6, 7, 4, 5, 3, 5, 0, 8, 5, 4, 4, 3, 5, 5, 5, 6, 6, 6, 2, 5, 5, 2, 8, 1, 9, 1, 5, 8, 3, 7, 8, 6, 6, 2, 1, 0, 0, 0, 2, 7, 4, 9, 9, 7, 7, 6, 1, 9, 0, 4, 6, 1, 0, 3, 9, 2, 2, 7, 2, 9, 3, 9, 1, 2, 0, 8, 5, 6, 8, 5, 8, 5, 5, 0, 0, 6, 4, 6, 5, 7, 0, 8, 7, 9, 1, 6, 1, 6, 5, 8, 2, 4, 9, 9, 4, 5, 5, 5, 3, 4, 3, 0, 4, 2, 6, 9, 7, 1, 5, 3, 5, 0, 9, 7, 2, 9, 8, 4, 7, 5, 5, 2, 6, 1, 7, 2, 1, 9, 7, 5, 3, 4, 6, 2, 9, 7, 0, 3, 2, 9, 5, 6, 3, 2, 7, 3, 4, 7, 7, 1, 6, 4, 2, 5, 5, 0, 0, 0, 0, 4, 3, 0, 8, 2, 0, 0, 2, 7, 3, 8, 3, 0, 7, 6, 1, 2, 5, 5, 9, 7, 4, 7, 1, 5, 7, 5, 6, 8, 7, 9, 3, 6, 5, 8, 5, 0, 8, 4, 1, 1, 6, 7, 0, 9, 3, 6, 1, 3, 7, 5, 5, 8, 7, 3, 7, 3, 7, 4, 0, 4, 4, 1, 5, 6, 2, 2, 8, 6, 1, 7, 2, 8, 9, 6, 7, 0, 5, 0, 5, 6, 3, 7, 9, 3, 9, 1, 5, 5, 4, 6, 7, 1, 0, 7, 4, 9, 2, 7, 8, 2, 3, 4, 9, 5, 8, 8, 2, 0, 7, 1, 9, 7, 9, 5, 7, 0, 8, 8, 6, 8, 2, 6, 2, 0, 4, 0, 7, 0, 6, 0, 2, 4, 6, 5, 8, 9, 3, 9, 0, 1, 7, 6, 5, 5, 5, 8, 4, 5, 7, 0, 9, 4, 2, 3, 7, 7, 9, 1, 2, 6, 8, 5, 5, 8, 0, 9, 4, 8, 6, 9, 0, 6, 1, 5, 0, 4, 2, 6, 9, 1, 9, 6, 4, 3, 3, 0, 6, 5, 2, 2, 3, 0, 0, 4, 7, 7, 4, 3, 8, 5, 5, 6, 4, 9, 1, 2, 1, 2, 4, 2, 9, 4, 1, 9, 6, 2, 9, 4, 6, 5, 2, 7, 9, 9, 0, 9, 7, 9, 9, 0, 2, 6, 2, 8, 6, 9, 1, 9, 1, 0, 9, 4, 3, 3, 7, 4, 0, 5, 8, 1, 9, 5, 2, 7, 8, 6, 3, 5, 6, 6, 1, 6, 3, 7, 2, 6, 4, 3, 7, 4, 9, 3, 6, 6, 3, 2, 2, 9, 2, 5, 2, 3, 4, 5, 3, 6, 1, 7, 7, 5, 4, 2, 8, 5, 5, 9, 1, 6, 6, 3};
//        System.out.println(checkSubarraySum(param, 2517));
    }

}
